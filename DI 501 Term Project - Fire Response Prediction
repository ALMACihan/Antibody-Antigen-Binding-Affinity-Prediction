{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "A100",
      "authorship_tag": "ABX9TyMS6IkPdRZwOFvjVk8zYmDy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ALMACihan/Antibody-Antigen-Binding-Affinity-Prediction/blob/main/DI%20501%20Term%20Project%20-%20Fire%20Response%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt\n",
        "df = pd.read_csv(\"/content/2023-yangin.csv\", encoding=\"utf-8-sig\")\n",
        "print(\"First 10 columns:\", df.columns[:20].to_list())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hsxssrs-cmZL",
        "outputId": "2c8c93f0-98bf-495a-e021-8eb7ffe86a36"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First 10 columns: ['_id', 'TARIH', 'YANGIN_TURU', 'YANGIN_SEBEBI', 'YANGIN_SONUCU', 'YAPI_SEKLI', 'ERKEK_VEFAT', 'KADIN_VEFAT', 'ITFAIYECI_VEFAT', 'ERKEK_YARALI', 'KADIN_YARALI', 'ITFAIYECI_YARALI', 'BUYUK_BAS_VEFAT', 'KUCUK_BAS_VEFAT', 'KUMES_HAYVANI_VEFAT', 'EVCIL_HAYVAN_VEFAT', 'DIGER HAYVAN', 'VARIS_SURESI (DAK.)', 'KULLANILAN_KOPUK_MIKTARI (KG)', 'KULLANILAN_SU_MIKTARI (m3)']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"TARIH\"] = pd.to_datetime(df[\"TARIH\"], errors=\"coerce\")\n",
        "df[\"call_hour\"] = df[\"TARIH\"].dt.hour\n",
        "\n",
        "df[\"response_minutes\"] = pd.to_numeric(df[\"VARIS_SURESI (DAK.)\"], errors=\"coerce\")\n",
        "\n",
        "central = [\"KONAK\",\"KARABAĞLAR\",\"BORNOVA\",\"BUCA\",\"KARŞIYAKA\",\n",
        "           \"ÇİĞLİ\",\"GAZİEMİR\",\"BALÇOVA\"]\n",
        "df[\"ILCE\"] = df[\"ILCE\"].str.upper().str.strip()\n",
        "df[\"district_group\"] = np.where(df[\"ILCE\"].isin(central), \"Central\", \"Periphery\")\n",
        "\n",
        "df = df.dropna(subset=[\"response_minutes\",\"call_hour\",\"YANGIN_TURU\"])\n",
        "df_clean = df[df[\"response_minutes\"] > 0]\n",
        "print(\"Rows after cleaning:\", len(df))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JD7sa3s4cm2g",
        "outputId": "714575d0-81fc-476f-8e94-6ff8e478a12e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rows after cleaning: 12368\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "ktctQU5FceLs",
        "outputId": "3e8c0020-c730-4315-bd5d-f03bdc4f13f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-756376773d76>:69: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=importance_df, x=\"Importance\", y=\"Feature\", palette=\"viridis\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2.114739255027598, 0.10994557143572281)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "features = [\n",
        "    \"ILCE\",\n",
        "    \"YANGIN_TURU\",\n",
        "    \"YANGIN_SEBEBI\",\n",
        "    \"KULLANILAN_SU_MIKTARI (m3)\",\n",
        "    \"KULLANILAN_KOPUK_MIKTARI (KG)\",\n",
        "    \"ADRES_BOLGESI\"\n",
        "]\n",
        "\n",
        "target = \"VARIS_SURESI (DAK.)\"\n",
        "\n",
        "ml_df = df_clean[features + [target]].dropna()\n",
        "\n",
        "numerical = [\"KULLANILAN_SU_MIKTARI (m3)\", \"KULLANILAN_KOPUK_MIKTARI (KG)\"]\n",
        "categorical = [\"ILCE\", \"YANGIN_TURU\", \"YANGIN_SEBEBI\", \"ADRES_BOLGESI\"]\n",
        "\n",
        "preprocessor = ColumnTransformer([\n",
        "    (\"cat\", OneHotEncoder(handle_unknown='ignore'), categorical)\n",
        "], remainder='passthrough')\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    (\"prep\", preprocessor),\n",
        "    (\"model\", RandomForestRegressor(random_state=42, n_estimators=100))\n",
        "])\n",
        "\n",
        "X = ml_df[features]\n",
        "y = ml_df[target]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "pipeline.fit(X_train, y_train)\n",
        "\n",
        "y_pred = pipeline.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "model = pipeline.named_steps['model']\n",
        "encoded_feature_names = pipeline.named_steps['prep'].get_feature_names_out()\n",
        "importances = model.feature_importances_\n",
        "\n",
        "importance_df = pd.DataFrame({\n",
        "    \"Feature\": encoded_feature_names,\n",
        "    \"Importance\": importances\n",
        "}).sort_values(by=\"Importance\", ascending=False).head(15)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=importance_df, x=\"Importance\", y=\"Feature\", palette=\"viridis\")\n",
        "plt.title(\"Top 15 Feature Importances\")\n",
        "plt.xlabel(\"Importance\")\n",
        "plt.ylabel(\"Feature\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "mae, r2\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "\n",
        "features = [\n",
        "    \"ILCE\",\n",
        "    \"YANGIN_TURU\",\n",
        "    \"YANGIN_SEBEBI\",\n",
        "    \"KULLANILAN_SU_MIKTARI (m3)\",  # lowercase \"m\"\n",
        "    \"KULLANILAN_KOPUK_MIKTARI (KG)\",\n",
        "    \"ADRES_BOLGESI\"\n",
        "]\n",
        "\n",
        "target = \"response_minutes\"\n",
        "\n",
        "categorical = [\"ILCE\", \"YANGIN_TURU\", \"YANGIN_SEBEBI\", \"ADRES_BOLGESI\"]\n",
        "numerical = [\"KULLANILAN_SU_MIKTARI (m3)\", \"KULLANILAN_KOPUK_MIKTARI (KG)\"]\n",
        "\n",
        "preprocessor = ColumnTransformer([\n",
        "    (\"cat\", OneHotEncoder(handle_unknown='ignore'), categorical)\n",
        "], remainder='passthrough')\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    (\"prep\", preprocessor),\n",
        "    (\"model\", RandomForestRegressor(random_state=42))\n",
        "])\n",
        "\n",
        "param_grid = {\n",
        "    \"model__n_estimators\": [100, 200],\n",
        "    \"model__max_depth\": [None, 10, 20],\n",
        "    \"model__min_samples_split\": [2, 5]\n",
        "}\n",
        "\n",
        "# 5-fold CV\n",
        "grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring=\"neg_mean_absolute_error\", n_jobs=-1)\n",
        "\n",
        "# Fit\n",
        "X = df_clean[features].dropna()\n",
        "y = df_clean[target].loc[X.index]\n",
        "grid_search.fit(X, y)\n",
        "\n",
        "best_model = grid_search.best_estimator_\n",
        "best_params = grid_search.best_params_\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "best_model.fit(X_train, y_train)\n",
        "y_pred = best_model.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"Best Parameters:\", best_params)\n",
        "print(\"Tuned MAE:\", mae)\n",
        "print(\"Tuned R²:\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2FvzsPtRea0z",
        "outputId": "1b458bfb-7c3e-4a93-c42b-549df5d818f9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'model__max_depth': 20, 'model__min_samples_split': 5, 'model__n_estimators': 100}\n",
            "Tuned MAE: 2.0351928819219705\n",
            "Tuned R²: 0.1807359556149435\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.dummy import DummyRegressor\n",
        "from scipy.stats import ttest_rel\n",
        "import numpy as np\n",
        "\n",
        "dummy = DummyRegressor(strategy='mean')\n",
        "dummy.fit(X_train, y_train)\n",
        "y_pred_dummy = dummy.predict(X_test)\n",
        "\n",
        "mae_dummy = mean_absolute_error(y_test, y_pred_dummy)\n",
        "r2_dummy = r2_score(y_test, y_pred_dummy)\n",
        "\n",
        "y_pred_tuned = best_model.predict(X_test)\n",
        "mae_tuned = mean_absolute_error(y_test, y_pred_tuned)\n",
        "r2_tuned = r2_score(y_test, y_pred_tuned)\n",
        "\n",
        "errors_dummy = np.abs(y_test - y_pred_dummy)\n",
        "errors_tuned = np.abs(y_test - y_pred_tuned)\n",
        "t_stat, p_value = ttest_rel(errors_dummy, errors_tuned)\n",
        "\n",
        "{\n",
        "    \"MAE - Baseline\": mae_dummy,\n",
        "    \"R² - Baseline\": r2_dummy,\n",
        "    \"MAE - Tuned Model\": mae_tuned,\n",
        "    \"R² - Tuned Model\": r2_tuned,\n",
        "    \"Paired t-test p-value\": p_value\n",
        "}\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vWjvJRxIfpqR",
        "outputId": "14c8bf11-54f2-4c73-a102-4eeda2d94ebe"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'MAE - Baseline': 2.7307319454558168,\n",
              " 'R² - Baseline': -0.014262025550790813,\n",
              " 'MAE - Tuned Model': 2.0351928819219705,\n",
              " 'R² - Tuned Model': 0.1807359556149435,\n",
              " 'Paired t-test p-value': np.float64(9.290982426196625e-36)}"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.dummy import DummyRegressor\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "from scipy.stats import ttest_rel\n",
        "\n",
        "df = pd.read_csv(\"/content/2023-yangin.csv\", encoding=\"utf-8-sig\")\n",
        "\n",
        "df[\"TARIH\"] = pd.to_datetime(df[\"TARIH\"], errors=\"coerce\")\n",
        "df[\"call_hour\"] = df[\"TARIH\"].dt.hour\n",
        "df[\"response_minutes\"] = pd.to_numeric(df[\"VARIS_SURESI (DAK.)\"], errors=\"coerce\")\n",
        "central = [\"KONAK\", \"KARABAĞLAR\", \"BORNOVA\", \"BUCA\", \"KARŞIYAKA\", \"ÇİĞLİ\", \"GAZİEMİR\", \"BALÇOVA\"]\n",
        "df[\"ILCE\"] = df[\"ILCE\"].str.upper().str.strip()\n",
        "df[\"district_group\"] = np.where(df[\"ILCE\"].isin(central), \"Central\", \"Periphery\")\n",
        "df = df.dropna(subset=[\"response_minutes\", \"call_hour\", \"YANGIN_TURU\"])\n",
        "df_clean = df[df[\"response_minutes\"] > 0].copy()\n",
        "\n",
        "features = [\n",
        "    \"ILCE\",\n",
        "    \"YANGIN_TURU\",\n",
        "    \"YANGIN_SEBEBI\",\n",
        "    \"KULLANILAN_SU_MIKTARI (m3)\",\n",
        "    \"KULLANILAN_KOPUK_MIKTARI (KG)\",\n",
        "    \"ADRES_BOLGESI\"\n",
        "]\n",
        "target = \"response_minutes\"\n",
        "\n",
        "df_clean = df_clean.dropna(subset=features)\n",
        "\n",
        "categorical = [\"ILCE\", \"YANGIN_TURU\", \"YANGIN_SEBEBI\", \"ADRES_BOLGESI\"]\n",
        "numerical = [\"KULLANILAN_SU_MIKTARI (m3)\", \"KULLANILAN_KOPUK_MIKTARI (KG)\"]\n",
        "\n",
        "preprocessor = ColumnTransformer([\n",
        "    (\"cat\", OneHotEncoder(handle_unknown='ignore'), categorical)\n",
        "], remainder='passthrough')\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    (\"prep\", preprocessor),\n",
        "    (\"model\", RandomForestRegressor(n_estimators=100, max_depth=20, min_samples_split=5, random_state=42))\n",
        "])\n",
        "\n",
        "# Split\n",
        "X = df_clean[features]\n",
        "y = df_clean[target]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Fit\n",
        "pipeline.fit(X_train, y_train)\n",
        "y_pred_tuned = pipeline.predict(X_test)\n",
        "\n",
        "dummy = DummyRegressor(strategy='mean')\n",
        "dummy.fit(X_train, y_train)\n",
        "y_pred_dummy = dummy.predict(X_test)\n",
        "\n",
        "mae_tuned = mean_absolute_error(y_test, y_pred_tuned)\n",
        "r2_tuned = r2_score(y_test, y_pred_tuned)\n",
        "mae_dummy = mean_absolute_error(y_test, y_pred_dummy)\n",
        "r2_dummy = r2_score(y_test, y_pred_dummy)\n",
        "\n",
        "errors_dummy = np.abs(y_test - y_pred_dummy)\n",
        "errors_tuned = np.abs(y_test - y_pred_tuned)\n",
        "t_stat, p_value = ttest_rel(errors_dummy, errors_tuned)\n",
        "\n",
        "{\n",
        "    \"MAE - Baseline\": mae_dummy,\n",
        "    \"R² - Baseline\": r2_dummy,\n",
        "    \"MAE - Tuned Model\": mae_tuned,\n",
        "    \"R² - Tuned Model\": r2_tuned,\n",
        "    \"Paired t-test p-value\": p_value\n",
        "}\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r785LqBSfqG-",
        "outputId": "021238dd-44b6-4f9b-a314-3d31fa44a25e"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'MAE - Baseline': 2.7307319454558168,\n",
              " 'R² - Baseline': -0.014262025550790813,\n",
              " 'MAE - Tuned Model': 2.0351928819219705,\n",
              " 'R² - Tuned Model': 0.1807359556149435,\n",
              " 'Paired t-test p-value': np.float64(9.290982426196625e-36)}"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    }
  ]
}